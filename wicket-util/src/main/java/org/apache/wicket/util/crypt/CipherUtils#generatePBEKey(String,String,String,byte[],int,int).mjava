	/**
	 * 
	 * 
	 * @param password
	 *              the password that will be used to build the key.
	 * @param pbeAlgorithm
	 *              the password-based algorithm that will be used to build the key.
	 * @param keyAlgorithm
	 *              the algorithm that will be used to build the key.
	 * @param salt
	 *              salt for encryption.
	 * @param iterationCount
	 * 				iteration count.
	 * @param keyLength
	 *              the key length.
	 * @return a new {@link SecretKey}
	 */
	public static SecretKey generatePBEKey(String password, String pbeAlgorithm,
		String keyAlgorithm, byte[] salt, int iterationCount, int keyLength)
	{
		try
		{
			SecretKeyFactory factory = SecretKeyFactory.getInstance(pbeAlgorithm);
			KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, iterationCount, keyLength);
			SecretKey secret = new SecretKeySpec(factory.generateSecret(spec).getEncoded(),
				keyAlgorithm);
			return secret;
		}
		catch (NoSuchAlgorithmException | InvalidKeySpecException e)
		{
			throw new RuntimeException(e);
		}
	}

