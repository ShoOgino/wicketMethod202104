		/*
		 * This method is an a copy of the super-method, with Class.forName replaced with a call to
		 * resolveClassByName.
		 */
		@Override
		protected Class<?> resolveProxyClass(String[] interfaces)
			throws ClassNotFoundException, IOException
		{
			try
			{
				return super.resolveProxyClass(interfaces);
			}
			catch (ClassNotFoundException cnfEx)
			{
				// ignore this exception.
				log.debug(
					"Proxy Class not found by the ObjectOutputStream itself, trying the IClassResolver");

				ClassLoader latestLoader = latestUserDefinedLoader();
				ClassLoader nonPublicLoader = null;
				boolean hasNonPublicInterface = false;

				// define proxy in class loader of non-public interface(s), if any
				Class<?>[] classObjs = new Class<?>[interfaces.length];
				for (int i = 0; i < interfaces.length; i++)
				{
					Class<?> cl = resolveClassByName(interfaces[i], latestLoader);
					if ((cl.getModifiers() & Modifier.PUBLIC) == 0)
					{
						if (hasNonPublicInterface)
						{
							if (nonPublicLoader != cl.getClassLoader())
							{
								throw new IllegalAccessError(
									"conflicting non-public interface class loaders");
							}
						}
						else
						{
							nonPublicLoader = cl.getClassLoader();
							hasNonPublicInterface = true;
						}
					}
					classObjs[i] = cl;
				}
				try
				{
					final InvocationHandler invocationHandler = (proxy, method, args) -> null;
					final Object proxyInstance = Proxy.newProxyInstance(
							hasNonPublicInterface ? nonPublicLoader : latestLoader, classObjs, invocationHandler);
					return proxyInstance.getClass();
				}
				catch (IllegalArgumentException e)
				{
					throw new ClassNotFoundException(null, e);
				}
			}
		}

