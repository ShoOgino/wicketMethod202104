	/**
	 * 
	 * @param request
	 * @param response
	 * @return request cycle
	 */
	public final RequestCycle createRequestCycle(final Request request, final Response response)
	{
		RequestCycleContext context = new RequestCycleContext(request, response,
			getRootRequestMapper(), getExceptionMapperProvider().get());

		RequestCycle requestCycle = getRequestCycleProvider().apply(context);
		requestCycle.getListeners().add(requestCycleListeners);
		requestCycle.getListeners().add(new IRequestCycleListener()
		{
			@Override
			public void onEndRequest(RequestCycle cycle)
			{
				internalGetPageManager().end();
			}
			
			@Override
			public void onDetach(final RequestCycle requestCycle)
			{
				internalGetPageManager().detach();

				IRequestLogger requestLogger = getRequestLogger();
				if (requestLogger != null)
				{
					requestLogger.requestTime((System.currentTimeMillis() - requestCycle.getStartTime()));
				}
			}
		});
		return requestCycle;
	}

