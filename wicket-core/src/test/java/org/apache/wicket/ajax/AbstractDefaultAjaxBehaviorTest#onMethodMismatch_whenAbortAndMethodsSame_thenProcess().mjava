	@Test
	void onMethodMismatch_whenAbortAndMethodsSame_thenProcess()
	{
		AtomicBoolean respondMethodCalled = new AtomicBoolean(false);
		MockPageWithOneComponent page = new MockPageWithOneComponent();
		Label component = new Label(MockPageWithOneComponent.COMPONENT_ID, "");
		page.add(component);

		AbstractDefaultAjaxBehavior behavior = new AbstractDefaultAjaxBehavior()
		{
			@Override
			protected void respond(AjaxRequestTarget target)
			{
				respondMethodCalled.set(true);
			}

			@Override
			protected void updateAjaxAttributes(final AjaxRequestAttributes attributes) {
				super.updateAjaxAttributes(attributes);
				attributes.setMethod(AjaxRequestAttributes.Method.GET);
			}

			@Override
			protected Form.MethodMismatchResponse onMethodMismatch() {
				return Form.MethodMismatchResponse.ABORT;
			}
		};
		component.add(behavior);

		tester.startPage(page);
		tester.getRequest().setMethod(Form.METHOD_GET);
		tester.executeBehavior(behavior);

		assertTrue(respondMethodCalled.get());
	}

